theory CHAPv2
begin
builtins:	hashing,symmetric-encryption
functions: enc/2, dec/2, prefix/1,sha/1
equations: dec(enc(M,k), k) = M
         , prefix(enc(<X,Y>, k)) = enc(X, k)


rule Password_init:
    [ Fr(~pw) ]
  --[ Init_pw_once() ]->
    [ !Own(~pw) ]

rule Server_challenge:
  let
    C1=<'01',~random_challenge>
  in
    [ !Own(pw),Fr(~random_challenge) ]
  --[ S1() ]->
    [ Out(C1),Server_challenge_done(~random_challenge,pw) ]

rule User_response:
  let
  	key=h(pw)
    C2=<'02',enc(sha(<~c_random,random_challenge>),key)>
  in
    [ Fr(~c_random),!Own(pw),In(<'01',random_challenge>) ]
  --[ U1() ,User_response_done(pw)]->
    [ Out(<C2,~c_random>) ]

rule Server_verify:
    [ In(<'02',c>),In(c_random),Server_challenge_done(random_challenge,pw)]
  --[ Eq(c,enc(sha(<c_random,random_challenge>),h(pw))),Finish(pw) ]->
    [ ]

rule Attack_test:
    [ In(c),In(m),!Own(pw) ]
  --[ Eq(c,enc(m,h(pw))),Attack_suc() ]->
    [ ]


restriction Verif:
"
    All x y #i. Eq(x,y) @ i ==> x = y
"
restriction Init:
" 
   All #i #j. Init_pw_once()@i & Init_pw_once()@j ==> #i=#j
"
/*
lemma Exe:
exists-trace
"
	Ex x #i #j. User_response_done(x)@i & Finish(x)@j
"*/


lemma Test:
exists-trace
"
	Ex #j. Attack_suc()@j
"

end