theory MAP1 begin



/* 



*/
functions: enc/2, dec/2, prefix/1
equations: dec(enc(M,k), k) = M
         , prefix(enc(<X,Y>, k)) = enc(X, k)


rule setup:
  [ Fr(~k) ]
--[ KeyGen($A,$B) ]->
  [ !SharedKey($A, $B,~k) ]

/*
  rule reveal:
  [ !SharedKeyWithServer(X, k) ]
--[ Reveal(X,k),Init_once('1') ]->
  [ Out(k), Reveal(X,k)]
*/
rule AB1:
  [ Fr(~na),!SharedKey($A, $B,kab)]
--[  ]->
  [ Out(~na) ,AB1($A,$B,~na)]


rule BA2:
let
	c=enc(<<<$A,$B>,na>,~nb>,kab)
in
  [ Fr(~nb),In(na),!SharedKey($A, $B,kab)]
--[  ]->
  [ Out(<~nb,c>),BA2($A, $B,~nb)]

 rule AB3:
 let
 	m=dec(c,kab)
 	nas=snd(fst(m))
 	nbs=snd(m)
 	c1=enc(<$A,nb>,kab)
 in
  [ In(<nb,c>),!SharedKey($A, $B,kab),AB1($A,$B,na)]
--[  Eq(nas,na),Eq(nbs,nb)]->
  [ Out(c1) ]


rule Attack_test1:
    [ In(c),In(m),!SharedKey($A,$B,kab)]
  --[ Eq(c,enc(m,kab)),Attack_suc() ]->
    [ ]



restriction Verif:
"
    All x y #i. Eq(x,y) @ i ==> x = y
"
/*
restriction Init:
" 
   All #i #j x. Init_once(x)@i & Init_once(x)@j ==> #i=#j
"

restriction Neq:
"
    All x #i. Neq(x,x) @ i ==> F
"
#ifdef timethis
#endif
*/

lemma Test:
exists-trace
"
  Ex #j. Attack_suc()@j
"

end

