theory nsscbc begin



/* 
 
 Protocol:

 1. A -> S: A, B, Na
 2. S -> B: {A, B, Ks}Kas, {A, B, Ks}Kbs, Na
 3. B -> A: {A, B, Ks}Kas, {Na}Kab, Nb
 4. A -> B: {Nb}Kab

*/

functions: enc/2, dec/2, Mac/3
equations: dec(enc(M,k), k) = M

rule setup:
  [ Fr(~k) ]
--[ KeyGen($A) ]->
  [ !SharedKeyWithServer($A, ~k) ]

/*rule reveal:
  [ !SharedKeyWithServer(X, k) ]
--[ Reveal(X,k),Init_once('1') ]->
  [ Out(k), Reveal(X,k)]
*/

rule Initiator1Request:
  [ Fr(~na) ]
--[ Initate($A,$B, ~na) ]->
  [ InitiatorRequested($A,$B, ~na), Out(<$A, $B, ~na>) ]

rule Server:
let
	c1=enc(<<$A,$B>,~MacK>,kas)
	c2=enc(<<$A,$B>,~MacK>,kbs)
	ser_responce=<c1,c2,n>
in
  [ In(<$A,$B,n>), Fr(~MacK), !SharedKeyWithServer($A,kas), !SharedKeyWithServer($B,kbs)  ]
--[ CreatedKey($A,$B,~MacK) ]->
  [ Out(ser_responce),!User($A,$B)]

rule ResponderKeyConfirm:
let
	ser_responce=<c1,c2,n>
	m2=dec(c2,kbs)
	MacK=snd(m2)
	Kab=Mac(n,~nb,MacK)
	c=enc(n,Kab)
	Rer_responce=<c1,c,~nb>
in
  [ In(ser_responce), !SharedKeyWithServer($B,kbs), Fr(~nb) ,!User($A,$B)]
--[ KeySharedResp($B,$A,~nb),Eq(fst(m2),<$A,$B>)]->
  [ ResponderWaitConfirm($B,$A, ~nb) , Out(Rer_responce) ]

rule Initiator2KeyAndForward:
let 
  Rer_responce=<c1,c,nb>
  m1=dec(c1,kas)
  MacK=snd(m1)
  Kab=Mac(na,nb,MacK)
  rna=dec(c,Kab)
in // this allows initiator to check that server generated the key for the partner correctly which is unrealistic but as long as we still find an attack that is ok.
  [ InitiatorRequested($A,$B, na), !SharedKeyWithServer($A, kas), In(Rer_responce) ,!User($A,$B)
  ]
--[  Eq(fst(m1),<$A,$B>),Eq(rna,na)]->
  [ Out(enc(nb,Kab)),KK(Kab)  ]



rule Attack_test:
    [ In(c),In(m),KK(kab) ]
  --[ Eq(c,enc(m,kab)),Attack_suc() ]->
    [ ]
   

restriction Verif:
"
    All x y #i. Eq(x,y) @ i ==> x = y
"
/*
restriction Init:
" 
   All #i #j x. Init_once(x)@i & Init_once(x)@j ==> #i=#j
"

restriction Neq:
"
    All x #i. Neq(x,x) @ i ==> F
"
*/
restriction singlesharedkeyperuser:
  "All A #i #j. KeyGen(A) @ i & KeyGen(A) @ j ==> #i = #j"


lemma Test:
exists-trace
"
	Ex #j. Attack_suc()@j
"
end

